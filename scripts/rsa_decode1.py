from sympy import mod_inverse

# Les données fournies
p = 23382692671581814681147482973935631627665647364166311968381601793328093890106781554729959383140453326622761892739721372265697969595635573251067121224383831
q = 29468848905367295280655884817633431891433303833944997890434617505601421238696194085380181344342650644888169861836368327919791052354262892280583075696679379
n = 689061037339483636851744871564868379980061151991904073814057216873412583484720768694905841053416938972235588548525570270575285633894975913717130070544407480547826227398039831409929129742007101671851757453656032161443946817685708282221883187089692065998793742064551244403369599965441075497085384181772038720949
e = 98161001623245946455371459972270637048947096740867123960987426843075734419854169415217693040603943985614577854750928453684840929755254248201161248375350238628917413291201125030514500977409961838501076015838508082749034318410808298025858181711613372870289482890074072555265382600388541381732534018133370862587

# Calculer φ(n)
phi_n = (p - 1) * (q - 1)

# Calculer d
d = mod_inverse(e, phi_n)

# Charger le fichier chiffré
file_path = "ciphertext"  # Remplacez par le chemin vers votre fichier
with open(file_path, "rb") as file:
    ciphertext_binary = file.read()

# Convertir les données binaires en un entier
ciphertext = int.from_bytes(ciphertext_binary, byteorder='big')

# Déchiffrer le texte chiffré : m = c^d mod n
plaintext = pow(ciphertext, d, n)

# Convertir le résultat en une chaîne lisible
plaintext_message = plaintext.to_bytes((plaintext.bit_length() + 7) // 8, byteorder='big').decode(errors='ignore')

# Afficher le message déchiffré
print("Message déchiffré :", plaintext_message)
